{"ast":null,"code":"import _objectSpread from \"/Users/alhamfebian/Desktop/ruby-assignment/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar todos = function todos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.data]);\n\n    case 'TOGGLE_TODO':\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread({}, todo, {\n          completed: !todo.completed\n        }) : todo;\n      });\n\n    case 'DELETE_TODO':\n      return state.filter(function (data, i) {\n        return i !== action.id;\n      });\n\n    case 'DUPLICATE_TODO':\n    case 'EDIT_TODO':\n      return state.map(function (todo) {\n        return todo.id === action.id ? _objectSpread({}, todo, {\n          editing: !todo.editing\n        }) : todo;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["/Users/alhamfebian/Desktop/ruby-assignment/src/reducers/todos.js"],"names":["todos","state","action","type","concat","data","map","todo","id","completed","filter","i","editing"],"mappings":";;AAAA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOF,KAAK,CAACG,MAAN,CAAa,CAACF,MAAM,CAACG,IAAR,CAAb,CAAP;;AACF,SAAK,aAAL;AACE,aAAOJ,KAAK,CAACK,GAAN,CAAU,UAAAC,IAAI;AAAA,eAChBA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACM,EAApB,qBACUD,IADV;AACgBE,UAAAA,SAAS,EAAE,CAACF,IAAI,CAACE;AADjC,aAEMF,IAHW;AAAA,OAAd,CAAP;;AAKF,SAAK,aAAL;AACE,aAAON,KAAK,CAACS,MAAN,CAAa,UAACL,IAAD,EAAOM,CAAP;AAAA,eAAaA,CAAC,KAAKT,MAAM,CAACM,EAA1B;AAAA,OAAb,CAAP;;AACF,SAAK,gBAAL;AAEA,SAAK,WAAL;AACE,aAAOP,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD;AAAA,eAAQA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACM,EAAnB,qBAA4BD,IAA5B;AAAiCK,UAAAA,OAAO,EAAC,CAACL,IAAI,CAACK;AAA/C,aAAwDL,IAAhE;AAAA,OAAV,CAAP;;AACF;AACE,aAAON,KAAP;AAhBJ;AAkBD,CAnBD;;AAqBA,eAAeD,KAAf","sourcesContent":["const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([action.data])\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n          (todo.id === action.id)\n              ? {...todo, completed: !todo.completed}\n              : todo\n      )\n    case 'DELETE_TODO':\n      return state.filter((data, i) => i !== action.id)\n    case 'DUPLICATE_TODO':\n\n    case 'EDIT_TODO':\n      return state.map((todo)=>todo.id === action.id ? {...todo,editing:!todo.editing}:todo)\n    default:\n      return state\n  }\n}\n\nexport default todos\n"]},"metadata":{},"sourceType":"module"}